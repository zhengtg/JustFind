// Autogenerated main.js file

function binpack_test()
{
	var srcVector = [256,256,70,25,52,190,12,80,95,216,17,179,45,48,76,123,64,78];
	
	var binWidth = srcVector[0];
	var binHeight = srcVector[1];
	//jslog("Initializing bin to size %dx%d.\n", binWidth, binHeight);
	cc.log("Initializing bin to size ", binWidth + "x" +binHeight);
	var i;
	
	var bin = new binpack.MaxRectsBinPack() ;
	var bin2 = new binpack.MaxRectsBinPack() ;
	bin.Init(binWidth, binHeight);
	bin2.Init(binWidth, binHeight);

	// Pack each rectangle (w_i, h_i) the user inputted on the command line.
	for(i = 2; i < srcVector.length; i += 2)
	{
		// Read next rectangle to pack.

			var rectWidth = srcVector[i];
			var rectHeight = srcVector[i+1];
			cc.log("Packing rectangle ofsize "+ rectWidth + "x" +rectHeight);
			var size = cc.size(rectWidth,rectHeight) ;
			//srcVector.push(size);

			// Perform the packing.
			var heuristic = 2;//pinpack.MaxRectsBinPack::RectBestAreaFit; // This can be changed individually even for each rectangle packed.
			var packedRect = bin.Insert(rectWidth, rectHeight, heuristic);

			// Test success or failure.
			if (packedRect.height > 0)
			{
				var text = ["Packed to (x,y)=(",
				            packedRect.x,
				            ",",
				            packedRect.y,
				            "), (w,h)=(",
				            packedRect.width,",",packedRect.height,
				            "). Free space left:",100- bin.Occupancy()*100,"%"];
				cc.log(text.toString());
				//cc.log("Packed to (x,y)=(%d,%d), (w,h)=(%d,%d). Free space left: %.2d%%\n", packedRect.x, packedRect.y, packedRect.width, packedRect.height, 100- bin.Occupancy()*100);
			}
			else
				cc.log("Failed! Could not find a proper position to pack this rectangle into. Skipping this one.\n");

	}

}
